import Head from "next/head";
import { useRef, useEffect, useState } from "react";
import Header from "@/components/Header";
import Footer from "@/components/Footer";
import SearchResults from "@/components/SearchResults";
import { Search } from "@/service/userService";
import router from "next/router";

const Home = () => {
  interface PhongKham {
    id: number;
    fullname: string;
    name_clinic: string;
    phonenumber: string;
    address: string;
    CM_heart: number;
    CS_heart: number;
    TĐ_heart: number;
    latitude: string;
    longitude: string;
    distance: number;
    duration: number;
    url_map: string;
  }
  interface Benhnhan {
    id: number;
    Ho: string;
    Ten: string;
    Ngaysinh: Date;
    Dienthoai: string;
    Gioitinh: any;
    Diachi: string;
    Trieuchung: string;
  }

  const [toadohientai, setToado] = useState("");
  const [sdt, setSDT] = useState<Benhnhan>();

  const [searchkey, setSearchkey] = useState("");
  const [phongkham, setPhongkham] = useState<PhongKham[]>([]);
  const [showresult, setShowresult] = useState(false);

  useEffect(() => {
    getLocation();
    //lấy thông tin người dùng
    const thongtinbenhnhan = JSON.parse(
      localStorage.getItem("thongtinbenhnhan") || "{}"
    );
    if (thongtinbenhnhan) {
      const res: Benhnhan[] = thongtinbenhnhan.thongtinbenhnhans;
      res?.map((item: any) => {
        setSDT(item.Dienthoai);
      });
    }
  }, []);

  //lấy vị trí hiện tại từ browser
  function getLocation() {
    const successFunction = async (position: GeolocationPosition) => {
      var lat = position.coords.latitude;
      var long = position.coords.longitude;
      var toado = lat + "," + long;
      setToado(toado);
    };
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(successFunction);
    } else {
      console.log("browser có Geolocation.");
    }
  }

  const searchpk = async (searchkey: string) => {
    // lấy đường link map điểm đi => điểm đến
    async function getURLDirection(
      lat: Number,
      lng: Number,
      latitude: string,
      longitude: string
    ): Promise<any> {
      const res = await fetch(
        `/api/map?lat=${lat}&lng=${lng}&latitude=${latitude}&longitude=${longitude}`
      );
      const data = await res.json();
      if (data) {
        let map = {};
        const url_map: string = data.urlMap;
        const distance: number = data.distance;
        const duration: number = data.duration;
        return { ...map, url_map, distance, duration };
      } else {
        throw new Error("Unable to get URL Map");
      }
    }

    // lấy tọa độ địa chỉ phòng khám
    async function getLatLngFromAddress(address: string): Promise<string> {
      const res = await fetch(`/api/getLatLng?address=${address}`);
      const data = await res.json();
      if (data) {
        return data;
      } else {
        throw new Error("Unable to getLatLngFromAddress");
      }
    }

    if (searchkey.length >= 2) {
      try {
        const params = {
          key: searchkey,
        };
        const response = await Search(params, sdt);
        const res: PhongKham[] = response.clinics;
        setPhongkham(res);

        // if (toadohientai && res.length) {
        //   const distances = await Promise.all(
        //     res.map(async (clinic) => {
        //       //vi tri hien tai
        //       let [lati, long] = toadohientai.split(",");
        //       let lat: Number = parseFloat(lati);
        //       let lng: Number = parseFloat(long);

        //       //lay vi tri diem den tu API Geocode
        //       const getLatLngDestination = await getLatLngFromAddress(
        //         clinic.address
        //       );
        //       let [latDestination, lngDestination] =
        //         getLatLngDestination.split(",");

        //       //lấy link map chỉ đường
        //       const map = await getURLDirection(
        //         lat,
        //         lng,
        //         latDestination,
        //         lngDestination
        //       );
        //       const url_map = map.url_map;
        //       // khoảng cách
        //       const distance = map.distance;
        //       // khoảng thời gian
        //       const duration = map.duration;

        //       return { ...clinic, distance, duration, url_map };
        //     })
        //   );
        //   setPhongkham(distances);
        // }
      } catch (error) {
        console.log(error);
      }
    }
    setShowresult(true);
  };

  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
    if (event.key === "Enter") {
      searchpk(searchkey);
    }
  };

  return (
    <>
      <Head>
        <title>Tìm Bác sĩ | © by TPSoft</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header />
      <div className="h-[200px] bg-no-repeat bg-cover bg-center flex flex-col bg-[url('../public/bgdoctor.jpg')]">
        <div className="h-3/6">
          <div className="h-full mt-5 bg-[url('../public/Logo_TimBS_W.png')] bg-center bg-no-repeat"></div>
        </div>
        <div className="h-3/6 flex items-end justify-center">
          <div className="flex justify-center items-center flex-row w-6/12 mx-auto my-[25px] rounded-[30px] bg-[#f8f8f8]">
            <input
              className="h-10 w-[92%] text-[black] text-base pl-2.5 border-[none] outline-none bg-transparent"
              onChange={(e) => setSearchkey(e.target.value)}
              type="text"
              placeholder="Tìm Bác sĩ/Phòng khám/Chuyên khoa"
              onKeyDown={handleKeyDown}
            />
            <button
              onClick={() => searchpk(searchkey)}
              className="text-black w-[10%] h-10 bg-[#e9ecef] text-lg cursor-pointer rounded-tr-[20px] rounded-br-[20px] border-[unset] outline-none"
            >
              Tìm
            </button>
          </div>
        </div>
      </div>
      <div className="h-auto flex flex-col min-h-full bg-[#e9ecef]">
        <div
          className={
            showresult === true
              ? "min-h-[calc(100vh_-_67px_-_180px_-_40px_-_46px)] h-auto w-auto flex justify-center gap-x-6 flex-wrap mb-5 mx-[10%]"
              : "h-[calc(100vh_-_67px_-_180px_-_40px_-_25px)] bg-[white]"
          }
        >
          {showresult === true &&
            phongkham.map((user, key) => (
              <SearchResults
                key={key}
                id={user.id}
                fullname={user.fullname}
                name_clinic={user.name_clinic}
                phonenumber={user.phonenumber}
                address={user.address}
                CM_heart={user.CM_heart}
                CS_heart={user.CS_heart}
                TĐ_heart={user.TĐ_heart}
                distance={user.distance}
                duration={user.duration}
                url_map={user.url_map}
                refersh={() => searchpk(searchkey)}
              />
            ))}
        </div>
      </div>
      <Footer />
    </>
  );
};

export default Home;
